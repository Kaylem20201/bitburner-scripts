var allServers = new Array();
var rootServers = new Array();

var rootableServers = new Array();

var portOpeners = 0;
var programs = ls("home", ".exe");

for (var i = 0; i < programs.length; i++) {
	switch (programs[i]) {
		case "BruteSSH.exe":
			portOpeners++;
			break;
		case "FTPCrack.exe":
			portOpeners++;
			break;
		case "relaySMTP.exe":
			portOpeners++;
			break;
		case "HTTPWorm.exe":
			portOpeners++;
			break;
		case "SQLInject.exe":
			portOpeners++;
			break;
		default:
			break;
	}
}


allServers = scan("home");

for (var i = 0; i < allServers.length; i++) {
	if (hasRootAccess(allServers[i])) {

		if (allServers[i].substring(0, 5) == "pserv") {
			i = allServers.length;
		} else {
			rootServers.push(allServers[i]);

			if (scan(allServers[i]).length > 1) { //if more than one server is returned, there's a deeper server
				serverRecursion(allServers[i]);
			}
		}

	}

}

write("rootedServers.txt", rootServers, "w");
write("rootableServers.txt", rootableServers, "w");

tprint("rootedServerList.script complete.");

function serverRecursion(givenServer) {
	var connectedServers = scan(givenServer);

	for (var k = 1; k < connectedServers.length; k++) { //will skip first server returned, should be the higher server

		if (hasRootAccess(connectedServers[k])) {

			rootServers.push(connectedServers[k]); // add found server to the list


		} else if ((getServerRequiredHackingLevel(connectedServers[k]) < getHackingLevel()) && (getServerNumPortsRequired(connectedServers[k]) <= portOpeners)) {
			rootableServers.push(connectedServers[k]);
		}
		serverRecursion(connectedServers[k]); // check new server connection

	}
}