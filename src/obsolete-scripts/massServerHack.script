/* Oh god. Okay,
	The goal here is to sustain a profitable hack on a single target across
	as many personal servers as possible.
	We should limit growth and weaken threads to only what's needed to reach the max/min
	Hacking therefore should be limited to as many threads as to not make
	growth/weaken inefficent. How we do that? We'll figure it out.

	Memory wise, most of the work should be done by the home server so that the
	personal servers can use as many threads as possible. Maybe this script should run
	indefinitely as it sets up scripts on the other servers.

	If this goes well, we can try to create another script to proliferate this idea
	across servers with MANY targets, but we won't tackle that yet. */

var target = args[0];

var growthThreshold = 0.9;
var tempSecurity;
var targetMinSecurity;
var tempGrowth;
var targetMaxGrowth;

var weakenMemNeeded = getScriptRam("simpleWeaken.script");
var growthMemNeeded = getScriptRam("simpleGrowth.script");
var hackMemNeeded = getScriptRam("simpleHack.script");

var homeMaxRam = getServerMaxRam("home");
var homeAvailableRam;

var counter = 0;
var tempServerRam = 0;


var pServers;
var rootedServers = new Array;


var tempThreads;
var threadsAvailableOnServer;

var execReturn;

while (true) {

	rootedServers = read("rootedServers.txt").split(",");
	pServers = getPurchasedServers();

	tempGrowth = getServerMoneyAvailable(target);
	targetMaxGrowth = getServerMaxMoney(target);

	if (tempGrowth < targetMaxGrowth) {
		tempThreads = threadsToGrowToMaxMoney(tempGrowth, targetMaxGrowth, target);
		counter = 0;
		while (tempThreads > 0) {

			if (pServers.length > 0) {
				tempServerRam = getServerMaxRam(pServers[counter]) - getServerUsedRam(pServers[counter]);
				threadsAvailableOnServer = Math.floor(tempServerRam / growthMemNeeded);
				if (threadsAvailableOnServer >= tempThreads) {
					//if there's enough ram on the server to run all remaining theads needed
					execReturn = exec("simpleGrowth.script", pServers[counter], tempThreads, target);
					if (execReturn != 0) {
						tempThreads = 0;
					} else {
						counter++;
					}
				} else if (counter < pServers.length && (threadsAvailableOnServer > 0)) {
					execReturn = exec("simpleGrowth.script", pServers[counter], threadsAvailableOnServer, target);
					if (execReturn != 0) {
						tempThreads -= threadsAvailableOnServer;
					}
					counter++;
				} else if (counter < pServers.length) {
					counter++;
				}
			}


			rootedServers = read("rootedServers.txt").split(",");
			pServers = getPurchasedServers();

			if (counter == pServers.length && tempThreads > 0) {
				print("entering rooted server section");
				counter = 0;
				while (counter < rootedServers.length && tempThreads > 0) {
					print("In rooted server loop");
					tempServerRam = getServerMaxRam(rootedServers[counter]) - getServerUsedRam(rootedServers[counter]);
					threadsAvailableOnServer = Math.floor(tempServerRam / growthMemNeeded);
					if (threadsAvailableOnServer >= tempThreads) {
						//if there's enough ram on the server to run all remaining theads needed
						execReturn = exec("simpleGrowth.script", rootedServers[counter], tempThreads, target);
						if (execReturn != 0) {
							tempThreads = 0;
						} else {
							counter++;
						}
					} else if (counter < rootedServers.length && (threadsAvailableOnServer > 0)) {
						execReturn = exec("simpleGrowth.script", rootedServers[counter], threadsAvailableOnServer, target);
						if (execReturn != 0) {
							tempThreads -= threadsAvailableOnServer;
						}
						counter++;
					} else if (counter < rootedServers.length) {
						counter++;
					}
				}
				print("After rooted server loop");
				counter = 0;

				if (tempThreads > 0) {
					if ((homeMaxRam - getServerUsedRam("home")) > (homeMaxRam / 3)) { //if there's at least a third of ram free -
						homeAvailableRam = ((homeMaxRam * (2 / 3)) - getServerUsedRam("home"));
						print("In home loop. homeAvailableRam:" + homeAvailableRam);
						threadsAvailableOnServer = Math.floor(homeAvailableRam / growthMemNeeded);
						if (threadsAvailableOnServer >= tempThreads) {
							execReturn = exec("simpleGrowth.script", "home", tempThreads, target);
							if (execReturn != 0) {
								tempThreads = 0;
							}
						} else if (threadsAvailableOnServer > 0) {
							execReturn = exec("simpleGrowth.script", "home", threadsAvailableOnServer, target);
							if (execReturn != 0) {
								tempThreads -= threadsAvailableOnServer;
							}
						}
					}
				}


			}
		}
		sleep((getGrowTime(target)) + 10000);
	}

	tempSecurity = getServerSecurityLevel(target);
	targetMinSecurity = getServerMinSecurityLevel(target);


	if (tempSecurity > targetMinSecurity) {
		tempThreads = threadsToWeakenToMin(tempSecurity, targetMinSecurity, target);
		counter = 0;
		while (tempThreads > 0) {
			rootedServers = read("rootedServers.txt").split(",");
			pServers = getPurchasedServers();
			if (counter == pServers.length) {
				counter = 0;
			}
			if (pServers.length > 0) {
				tempServerRam = getServerMaxRam(pServers[counter]) - getServerUsedRam(pServers[counter]);
				threadsAvailableOnServer = Math.floor(tempServerRam / weakenMemNeeded);
				if (threadsAvailableOnServer >= tempThreads) {
					//if there's enough ram on the server to run all remaining theads needed
					execReturn = exec("simpleWeaken.script", pServers[counter], tempThreads, target);
					if (execReturn != 0) {
						tempThreads = 0;
					} else {
						counter++;
					}
				} else if ((counter < pServers.length) && (threadsAvailableOnServer > 0)) {
					execReturn = exec("simpleWeaken.script", pServers[counter], threadsAvailableOnServer, target);
					if (execReturn != 0) {
						tempThreads -= threadsAvailableOnServer;
					}
					counter++;
				} else if (counter < pServers.length) {
					counter++;
				}
			}


			if (counter == pServers.length && tempThreads > 0) {
				counter = 0;
				while (counter < rootedServers.length && tempThreads > 0) {
					rootedServers = read("rootedServers.txt").split(",");
					pServers = getPurchasedServers();
					tempServerRam = getServerMaxRam(rootedServers[counter]) - getServerUsedRam(rootedServers[counter]);
					threadsAvailableOnServer = Math.floor(tempServerRam / weakenMemNeeded);
					if (threadsAvailableOnServer >= tempThreads) {
						//if there's enough ram on the server to run all remaining theads needed
						execReturn = exec("simpleWeaken.script", rootedServers[counter], tempThreads, target);
						if (execReturn != 0) {
							tempThreads = 0;
						} else {
							counter++;
						}
					} else if (counter < rootedServers.length && (threadsAvailableOnServer > 0)) {
						execReturn = exec("simpleWeaken.script", rootedServers[counter], threadsAvailableOnServer, target);
						if (execReturn != 0) {
							tempThreads -= threadsAvailableOnServer;
						}
						counter++;
					} else if (counter < rootedServers.length) {
						counter++;
					}
				}
				counter = 0;

				if (tempThreads > 0) {
					print("Entering the home loop");
					if ((homeMaxRam - getServerUsedRam("home")) > (homeMaxRam / 3)) { //if there's at least a third of ram free -
						print("There's at least a third of memory free");
						homeAvailableRam = ((homeMaxRam * (2 / 3)) - getServerUsedRam("home"));
						threadsAvailableOnServer = Math.floor(homeAvailableRam / weakenMemNeeded);
						if (threadsAvailableOnServer >= tempThreads) {
							execReturn = exec("simpleWeaken.script", "home", tempThreads, target);
							if (execReturn != 0) {
								tempThreads = 0;
							}
						} else if (threadsAvailableOnServer > 0) {
							execReturn = exec("simpleWeaken.script", "home", threadsAvailableOnServer, target);
							if (execReturn != 0) {
								tempThreads -= threadsAvailableOnServer;
							}
						}
					}
				}
			}
		}
		sleep((getWeakenTime(target)) + 10000);
	}

	tempThreads = threadsToHackFromMaxMoney(target);
	counter = 0;

	while (tempThreads > 0) {

		rootedServers = read("rootedServers.txt").split(",");
		pServers = getPurchasedServers();
		if (counter == pServers.length) {
			counter = 0;
		}
		if (pServers.length > 0) {
			tempServerRam = getServerMaxRam(pServers[counter]) - getServerUsedRam(pServers[counter]);
			threadsAvailableOnServer = Math.floor(tempServerRam / hackMemNeeded);
			if (threadsAvailableOnServer >= tempThreads) {
				//if there's enough ram on the server to run all remaining theads needed
				execReturn = exec("simpleHack.script", pServers[counter], tempThreads, target);
				if (execReturn != 0) {
					tempThreads = 0;
				} else {
					counter++;
				}
			} else if (counter < pServers.length && (threadsAvailableOnServer > 0)) {
				execReturn = exec("simpleHack.script", pServers[counter], threadsAvailableOnServer, target);
				if (execReturn != 0) {
					tempThreads -= threadsAvailableOnServer;
				}
				counter++;
			} else if (counter < pServers.length) {
				counter++;
			}
		}


		if (counter == pServers.length && tempThreads > 0) {
			counter = 0;
			while (counter < rootedServers.length && tempThreads > 0) {
				rootedServers = read("rootedServers.txt").split(",");
				pServers = getPurchasedServers();
				tempServerRam = getServerMaxRam(rootedServers[counter]) - getServerUsedRam(rootedServers[counter]);
				threadsAvailableOnServer = Math.floor(tempServerRam / hackMemNeeded);
				if (threadsAvailableOnServer >= tempThreads) {
					//if there's enough ram on the server to run all remaining theads needed
					execReturn = exec("simpleHack.script", rootedServers[counter], tempThreads, target);
					if (execReturn != 0) {
						tempThreads = 0;
					} else {
						counter++;
					}
				} else if (counter < rootedServers.length && (threadsAvailableOnServer > 0)) {
					execReturn = exec("simpleHack.script", rootedServers[counter], threadsAvailableOnServer, target);
					if (execReturn != 0) {
						tempThreads -= threadsAvailableOnServer;
					}
					counter++;
				} else if (counter < rootedServers.length) {
					counter++;
				}
			}
			counter = 0;

			if (tempThreads > 0) {
				if ((homeMaxRam - getServerUsedRam("home")) > (homeMaxRam / 3)) { //if there's at least a third of ram free -
					homeAvailableRam = ((homeMaxRam * (2 / 3)) - getServerUsedRam("home"));
					threadsAvailableOnServer = Math.floor(homeAvailableRam / hackMemNeeded);
					if (threadsAvailableOnServer >= tempThreads) {
						execReturn = exec("simpleHack.script", "home", tempThreads, target);
						if (execReturn != 0) {
							tempThreads = 0;
						}
					} else if (threadsAvailableOnServer > 0) {
						execReturn = exec("simpleHack.script", "home", threadsAvailableOnServer, target);
						if (execReturn != 0) {
							tempThreads -= threadsAvailableOnServer;
						}
					}
				}
			}
		}
	}
	sleep((getHackTime(target)) + 10000);
}


function threadsToHackFromMaxMoney(target) {
	/*This is to calculate how many hack threads would be needed
	to bring the target from max money down to the threshold*/
	var threads = hackAnalyzeThreads(target, getServerMaxMoney(target) * (1 - growthThreshold));
	threads = threads * (1 / hackAnalyzeChance(target));
	return Math.ceil(threads);
}

function threadsToGrowToMaxMoney(currentGrowth, targetMax, target) {
	/*This is to calculate how many threads are needed
	to bring the target back up to max*/
	var threads = growthAnalyze(target, targetMax / currentGrowth);
	return Math.ceil(threads);
}

function threadsToWeakenToMin(currentSecurity, targetMin, target) {
	var threads = (currentSecurity - targetMin) / .05;
	return Math.ceil(threads);
}